searchNodes=[{"doc":"Automated task to start the terminal interface that is a way that users can interact with the system business logic and have the chace to make a difference to the world by exploring another celestial bodies. This task does not requires any inputs, all the inputs are asked after the first run and user will be followed through some steps. To run this task type the command mix start_terminal_interface in your command prompt. See lib/nasa_exploration_rovers_control_terminal_interface.ex for more info.","ref":"Mix.Tasks.StartTerminalInterface.html","title":"Mix.Tasks.StartTerminalInterface","type":"task"},{"doc":"Bounded context for the NASA Exploration Rovers Control System. This module contains all the system use cases.","ref":"NASAExplorationRoversControl.html","title":"NASAExplorationRoversControl","type":"module"},{"doc":"Executes an exploration rover given commands. The result of this function will be the exploration rover with new direction and position. This function also clears the exploration rover commands, as it has already been executed. Examples iex&gt; execute_exploration_rover_commands ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ &quot;M&quot; ] } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 1 } , direction : &quot;N&quot; } } iex&gt; execute_exploration_rover_commands ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 1 , 2 } , direction : &quot;N&quot; , commands : [ &quot;L&quot; , &quot;M&quot; , &quot;L&quot; , &quot;M&quot; , &quot;L&quot; , &quot;M&quot; , &quot;L&quot; , &quot;M&quot; , &quot;M&quot; ] } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 1 , 3 } , direction : &quot;N&quot; } } iex&gt; execute_exploration_rover_commands ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 3 , 3 } , direction : &quot;E&quot; , commands : [ &quot;M&quot; , &quot;M&quot; , &quot;R&quot; , &quot;M&quot; , &quot;M&quot; , &quot;R&quot; , &quot;M&quot; , &quot;R&quot; , &quot;R&quot; , &quot;M&quot; ] } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 5 , 1 } , direction : &quot;E&quot; } } iex&gt; execute_exploration_rover_commands ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ ] } ) { :error , &quot;Exploration rover has not commands to be executed.&quot; } iex&gt; execute_exploration_rover_commands ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; , commands : [ &quot;M&quot; ] } ) { :error , &quot;The system prevented the exploration rover from leaving the ground. Check the commands and try again. The exploration rover was kept in the initial position and direction.&quot; } iex&gt; execute_exploration_rover_commands ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; , commands : [ &quot;I&quot; ] } ) ** (RuntimeError) Exploration rover has an invalid command: I","ref":"NASAExplorationRoversControl.html#execute_exploration_rover_commands/1","title":"NASAExplorationRoversControl.execute_exploration_rover_commands/1","type":"function"},{"doc":"Use the commands instructions from file to interact with the exploration rovers. The output is a map containing the ground size and all the exploration rovers with their new positions and directions. The outputed exploration rovers will have it's commands cleared, as it has already been executed. This use case also validates if any of the exploration rovers would leave the grounded area by the commands given and will output an error instead of the exploration rover at the list if that's the case. Examples iex&gt; explore_celestial_body_using_commands_from_file ( &quot;mars&quot; , &quot;priv/commands_input_files/mars/exploration_attempt_2_by_zena_cardman_2030_05_09&quot; ) { :ok , %{ ground_size : { 3 , 8 } , exploration_rovers : [ % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 3 } , direction : &quot;N&quot; , commands : [ ] } , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 8 } , direction : &quot;W&quot; , commands : [ ] } ] } } iex&gt; explore_celestial_body_using_commands_from_file ( &quot;mars&quot; , &quot;priv/commands_input_files/mars/exploration_attempt_3_by_raja_chari_2030_05_11&quot; ) { :ok , %{ ground_size : { 3 , 8 } , exploration_rovers : [ % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 4 } , direction : &quot;N&quot; , commands : [ ] } , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 8 } , direction : &quot;W&quot; , commands : [ ] } , { :error , &quot;The system prevented the exploration rover from leaving the ground. Check the commands and try again. The exploration rover was kept in the initial position and direction.&quot; } , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 1 , 1 } , direction : &quot;W&quot; , commands : [ ] } , { :error , &quot;The system prevented the exploration rover from leaving the ground. Check the commands and try again. The exploration rover was kept in the initial position and direction.&quot; } , { :error , &quot;The system prevented the exploration rover from leaving the ground. Check the commands and try again. The exploration rover was kept in the initial position and direction.&quot; } , ] } } iex&gt; explore_celestial_body_using_commands_from_file ( &quot;mars&quot; , &quot;priv/commands_input_files/mars/exploration_attempt_1_by_kayla_barron_2030_05_08&quot; ) { :error , &quot;The terrain of mars is rectangular and the value entered is a square. Please check your commands.&quot; } iex&gt; explore_celestial_body_using_commands_from_file ( &quot;moon&quot; , &quot;priv/commands_input_files/mars/exploration_attempt_2_by_zena_cardman_2030_05_09&quot; ) { :error , &quot;Celestial Body is not mapped to be explored yet.&quot; }","ref":"NASAExplorationRoversControl.html#explore_celestial_body_using_commands_from_file/2","title":"NASAExplorationRoversControl.explore_celestial_body_using_commands_from_file/2","type":"function"},{"doc":"Interpret exploration commands input file, returning a readable map. Examples iex&gt; interpret_exploration_commands_input_file ( &quot;priv/commands_input_files/mars/exploration_attempt_1_by_kayla_barron_2030_05_08&quot; ) { :ok , %{ ground_size : { 5 , 5 } , exploration_rovers : [ % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 1 , 2 } , direction : &quot;N&quot; , commands : [ &quot;L&quot; , &quot;M&quot; , &quot;L&quot; , &quot;M&quot; , &quot;L&quot; , &quot;M&quot; , &quot;L&quot; , &quot;M&quot; , &quot;M&quot; ] } , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 3 , 3 } , direction : &quot;E&quot; , commands : [ &quot;M&quot; , &quot;M&quot; , &quot;R&quot; , &quot;M&quot; , &quot;M&quot; , &quot;R&quot; , &quot;M&quot; , &quot;R&quot; , &quot;R&quot; , &quot;M&quot; ] } ] } } iex&gt; interpret_exploration_commands_input_file ( &quot;priv/commands_input_files/mars/exploration_attempt_2_by_zena_cardman_2030_05_09&quot; ) { :ok , %{ ground_size : { 3 , 8 } , exploration_rovers : [ % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ &quot;M&quot; , &quot;M&quot; , &quot;M&quot; ] } , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 3 , 8 } , direction : &quot;N&quot; , commands : [ &quot;L&quot; , &quot;M&quot; , &quot;M&quot; , &quot;M&quot; ] } ] } } iex&gt; interpret_exploration_commands_input_file ( &quot;invalid&quot; ) { :error , &quot;File path is invalid.&quot; }","ref":"NASAExplorationRoversControl.html#interpret_exploration_commands_input_file/1","title":"NASAExplorationRoversControl.interpret_exploration_commands_input_file/1","type":"function"},{"doc":"Moves an exploration rover according to its current direction. The result of this function will be the exploration rover with a new position. Examples iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 1 } , direction : &quot;N&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 3 } , direction : &quot;N&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 4 } , direction : &quot;N&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 3 } , direction : &quot;S&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 2 } , direction : &quot;S&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 1 } , direction : &quot;S&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 2 , 0 } , direction : &quot;W&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 1 , 0 } , direction : &quot;W&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 1 , 0 } , direction : &quot;W&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 3 , 0 } , direction : &quot;E&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 4 , 0 } , direction : &quot;E&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;E&quot; } ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 1 , 0 } , direction : &quot;E&quot; } } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } ) { :error , &quot;Invalid position. Coordinates must not be negative.&quot; } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; } ) { :error , &quot;Invalid position. Coordinates must not be negative.&quot; } iex&gt; move_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;I&quot; } ) ** (RuntimeError) Exploration rover has an invalid direction","ref":"NASAExplorationRoversControl.html#move_exploration_rover/1","title":"NASAExplorationRoversControl.move_exploration_rover/1","type":"function"},{"doc":"Rotates an exploration rover. The result of this function will be the exploration rover with a new direction. Examples iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } , &quot;L&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } , &quot;L&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;E&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; } , &quot;L&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;E&quot; } , &quot;L&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;I&quot; } , &quot;L&quot; ) ** (RuntimeError) Exploration rover has an invalid direction iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } , &quot;R&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;E&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } , &quot;R&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; } , &quot;R&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;E&quot; } , &quot;R&quot; ) { :ok , % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } } iex&gt; rotate_exploration_rover ( % Elixir.NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;I&quot; } , &quot;R&quot; ) ** (RuntimeError) Exploration rover has an invalid direction","ref":"NASAExplorationRoversControl.html#rotate_exploration_rover/2","title":"NASAExplorationRoversControl.rotate_exploration_rover/2","type":"function"},{"doc":"Factory responsible to interact with inputs and return the Celestial Body module accordingly.","ref":"NASAExplorationRoversControl.CelestialBodies.Factory.html","title":"NASAExplorationRoversControl.CelestialBodies.Factory","type":"module"},{"doc":"Use the commands instructions from file to interact with the exploration rovers. The output is a map containing the ground size and all the exploration rovers with their new positions and directions. Examples iex&gt; get_celestial_body_module ( &quot;mars&quot; ) { :ok , NASAExplorationRoversControl.CelestialBodies.Mars } iex&gt; get_celestial_body_module ( &quot;moon&quot; ) { :error , &quot;Celestial Body is not mapped to be explored yet.&quot; } iex&gt; get_celestial_body_module ( &quot;saturn&quot; ) { :error , &quot;Celestial Body is not mapped to be explored yet.&quot; }","ref":"NASAExplorationRoversControl.CelestialBodies.Factory.html#get_celestial_body_module/1","title":"NASAExplorationRoversControl.CelestialBodies.Factory.get_celestial_body_module/1","type":"function"},{"doc":"Module representing Mars Celestial Body.","ref":"NASAExplorationRoversControl.CelestialBodies.Mars.html","title":"NASAExplorationRoversControl.CelestialBodies.Mars","type":"module"},{"doc":"Returns the time for Exploration Rovers to receive commands. Examples iex&gt; average_time_for_exploration_rovers_to_receive_commands ( ) &quot;8 minutes&quot;","ref":"NASAExplorationRoversControl.CelestialBodies.Mars.html#average_time_for_exploration_rovers_to_receive_commands/0","title":"NASAExplorationRoversControl.CelestialBodies.Mars.average_time_for_exploration_rovers_to_receive_commands/0","type":"function"},{"doc":"Validates if the given instructions are valid for Mars exploration. If it is valid, returns the current input. If not, returns an error according to the validation not fullfiled. If the input is an error previously given, the output will be the same given error. Examples iex&gt; validate ( { :ok , %{ ground_size : { 10 , 2 } , exploration_rovers : [ ] } } ) { :ok , %{ ground_size : { 10 , 2 } , exploration_rovers : [ ] } } iex&gt; validate ( { :ok , %{ ground_size : { 5 , 5 } , exploration_rovers : [ ] } } ) { :error , &quot;The terrain of mars is rectangular and the value entered is a square. Please check your commands.&quot; } iex&gt; validate ( { :error , &quot;Some previous error.&quot; } ) { :error , &quot;Some previous error.&quot; }","ref":"NASAExplorationRoversControl.CelestialBodies.Mars.html#validate/1","title":"NASAExplorationRoversControl.CelestialBodies.Mars.validate/1","type":"function"},{"doc":"Exploration Rover entity, it represents a real exploration rover that is exploring another planet. It has three attributes: position (required): A tuble with x and y axis. direction (required): A direction according to the Wind Rose Compass (in English) represented by a single character string. Valid values are N, S, W, E. commands: A list of commands to be performed by rover. Valid values for each command in the list are L (left), R (right) or M (move). Examples iex&gt; % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } iex&gt; % NASAExplorationRoversControl.ExplorationRover { position : { 3 , 2 } , direction : &quot;S&quot; } % NASAExplorationRoversControl.ExplorationRover { position : { 3 , 2 } , direction : &quot;S&quot; } iex&gt; % NASAExplorationRoversControl.ExplorationRover { position : { 6 , 6 } , direction : &quot;W&quot; } % NASAExplorationRoversControl.ExplorationRover { position : { 6 , 6 } , direction : &quot;W&quot; } iex&gt; % NASAExplorationRoversControl.ExplorationRover { position : { 3 , 0 } , direction : &quot;E&quot; } % NASAExplorationRoversControl.ExplorationRover { position : { 3 , 0 } , direction : &quot;E&quot; }","ref":"NASAExplorationRoversControl.ExplorationRover.html","title":"NASAExplorationRoversControl.ExplorationRover","type":"module"},{"doc":"Changes existent exploration rover direction. Examples iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . change_direction ( &quot;W&quot; ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;W&quot; } } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . change_direction ( &quot;E&quot; ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;E&quot; } } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . change_direction ( &quot;I&quot; ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; }","ref":"NASAExplorationRoversControl.ExplorationRover.html#change_direction/2","title":"NASAExplorationRoversControl.ExplorationRover.change_direction/2","type":"function"},{"doc":"Changes existent exploration rover position. Examples iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . change_position ( { 3 , 3 } ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 3 , 3 } , direction : &quot;N&quot; } } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . change_position ( { 1 , 4 } ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 1 , 4 } , direction : &quot;S&quot; } } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . change_position ( { - 1 , 4 } ) { :error , &quot;Invalid position. Coordinates must not be negative.&quot; } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;S&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . change_position ( 123 ) { :error , &quot;Invalid position. Must be a tuple.&quot; }","ref":"NASAExplorationRoversControl.ExplorationRover.html#change_position/2","title":"NASAExplorationRoversControl.ExplorationRover.change_position/2","type":"function"},{"doc":"Clears an existing exploration rover given commands. Examples iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ &quot;L&quot; ] } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . clear_commands ( ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ ] } } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ &quot;L&quot; , &quot;M&quot; , &quot;R&quot; ] } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . clear_commands ( ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ ] } }","ref":"NASAExplorationRoversControl.ExplorationRover.html#clear_commands/1","title":"NASAExplorationRoversControl.ExplorationRover.clear_commands/1","type":"function"},{"doc":"Adds commands to an existing exploration rover. Each command will be validated to match a valid command that can be L (left), R (right) or M (move). Examples iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . give_commands ( [ &quot;L&quot; ] ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ &quot;L&quot; ] } } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . give_commands ( [ &quot;L&quot; , &quot;L&quot; , &quot;R&quot; ] ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; , commands : [ &quot;L&quot; , &quot;L&quot; , &quot;R&quot; ] } } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . give_commands ( [ ] ) { :error , &quot;Commands list must not be empty.&quot; } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . give_commands ( &quot;string&quot; ) { :error , &quot;Commands must be a list.&quot; } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . give_commands ( [ &quot;I&quot; ] ) { :error , &quot;Command `I` is invalid. Must be L, R or M.&quot; } iex&gt; exploration_rover = % NASAExplorationRoversControl.ExplorationRover { position : { 0 , 0 } , direction : &quot;N&quot; } ...&gt; exploration_rover |&gt; NASAExplorationRoversControl.ExplorationRover . give_commands ( [ &quot;L&quot; , &quot;M&quot; , &quot;P&quot; ] ) { :error , &quot;Command `P` is invalid. Must be L, R or M.&quot; }","ref":"NASAExplorationRoversControl.ExplorationRover.html#give_commands/2","title":"NASAExplorationRoversControl.ExplorationRover.give_commands/2","type":"function"},{"doc":"Returns a new struct for given position and direction. It also validates position and direction fields and raise when something is not right. Examples iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 10 , 3 } , direction : &quot;W&quot; ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 10 , 3 } , direction : &quot;W&quot; } } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 3 , 5 } , direction : &quot;S&quot; ) { :ok , % NASAExplorationRoversControl.ExplorationRover { position : { 3 , 5 } , direction : &quot;S&quot; } } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { - 1 , 0 } , direction : &quot;E&quot; ) { :error , &quot;Invalid position. Coordinates must not be negative.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , - 1 } , direction : &quot;E&quot; ) { :error , &quot;Invalid position. Coordinates must not be negative.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : &quot;string&quot; , direction : &quot;E&quot; ) { :error , &quot;Invalid position. Must be a tuple.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : 123 , direction : &quot;N&quot; ) { :error , &quot;Invalid position. Must be a tuple.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : [ ] , direction : &quot;N&quot; ) { :error , &quot;Invalid position. Must be a tuple.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : %{ } , direction : &quot;N&quot; ) { :error , &quot;Invalid position. Must be a tuple.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , 0 } , direction : &quot;invalid&quot; ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , 0 } , direction : &quot;I&quot; ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , 0 } , direction : &quot;P&quot; ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , 0 } , direction : 123 ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , 0 } , direction : [ ] ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , 0 } , direction : { } ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; } iex&gt; NASAExplorationRoversControl.ExplorationRover . new ( position : { 0 , 0 } , direction : %{ } ) { :error , &quot;Invalid direction. Must be N,S,W or E.&quot; }","ref":"NASAExplorationRoversControl.ExplorationRover.html#new/1","title":"NASAExplorationRoversControl.ExplorationRover.new/1","type":"function"},{"doc":"","ref":"NASAExplorationRoversControl.ExplorationRover.html#t:t/0","title":"NASAExplorationRoversControl.ExplorationRover.t/0","type":"type"},{"doc":"Use case responsible for execute an exploration rover given commands. Do not call this module directly, use always the NASAExplorationRoversControl bounded context.","ref":"NASAExplorationRoversControl.Interactors.ExecuteExplorationRoverCommands.html","title":"NASAExplorationRoversControl.Interactors.ExecuteExplorationRoverCommands","type":"module"},{"doc":"","ref":"NASAExplorationRoversControl.Interactors.ExecuteExplorationRoverCommands.html#perform/1","title":"NASAExplorationRoversControl.Interactors.ExecuteExplorationRoverCommands.perform/1","type":"function"},{"doc":"Use case responsible for use the commands instructions from file to interact with the exploration rovers to explore a Celestial Body. Do not call this module directly, use always the NASAExplorationRoversControl bounded context.","ref":"NASAExplorationRoversControl.Interactors.ExploreCelestialBodyUsingCommandsFromFile.html","title":"NASAExplorationRoversControl.Interactors.ExploreCelestialBodyUsingCommandsFromFile","type":"module"},{"doc":"","ref":"NASAExplorationRoversControl.Interactors.ExploreCelestialBodyUsingCommandsFromFile.html#do_perform/2","title":"NASAExplorationRoversControl.Interactors.ExploreCelestialBodyUsingCommandsFromFile.do_perform/2","type":"function"},{"doc":"","ref":"NASAExplorationRoversControl.Interactors.ExploreCelestialBodyUsingCommandsFromFile.html#perform/2","title":"NASAExplorationRoversControl.Interactors.ExploreCelestialBodyUsingCommandsFromFile.perform/2","type":"function"},{"doc":"Use case responsible for interpret exploration commands input file and return a readable map. Do not call this module directly, use always the NASAExplorationRoversControl bounded context.","ref":"NASAExplorationRoversControl.Interactors.InterpretExplorationCommandsInputFile.html","title":"NASAExplorationRoversControl.Interactors.InterpretExplorationCommandsInputFile","type":"module"},{"doc":"","ref":"NASAExplorationRoversControl.Interactors.InterpretExplorationCommandsInputFile.html#perform/1","title":"NASAExplorationRoversControl.Interactors.InterpretExplorationCommandsInputFile.perform/1","type":"function"},{"doc":"Use case responsible for move an exploration rover. Do not call this module directly, use always the NASAExplorationRoversControl bounded context.","ref":"NASAExplorationRoversControl.Interactors.MoveExplorationRover.html","title":"NASAExplorationRoversControl.Interactors.MoveExplorationRover","type":"module"},{"doc":"","ref":"NASAExplorationRoversControl.Interactors.MoveExplorationRover.html#perform/1","title":"NASAExplorationRoversControl.Interactors.MoveExplorationRover.perform/1","type":"function"},{"doc":"Use case responsible for rotate an exploration rover. Do not call this module directly, use always the NASAExplorationRoversControl bounded context.","ref":"NASAExplorationRoversControl.Interactors.RotateExplorationRover.html","title":"NASAExplorationRoversControl.Interactors.RotateExplorationRover","type":"module"},{"doc":"","ref":"NASAExplorationRoversControl.Interactors.RotateExplorationRover.html#perform/2","title":"NASAExplorationRoversControl.Interactors.RotateExplorationRover.perform/2","type":"function"},{"doc":"This module is a bridge between the user and the application business logic (aka. Delivery Mechanism). User is able to interact with the business logic using a terminal interface.","ref":"NASAExplorationRoversControlTerminalInterface.html","title":"NASAExplorationRoversControlTerminalInterface","type":"module"},{"doc":"Starts the interaction with the user using the terminal interface. User will be followed through the steps: Selection of the celestial body to make the exploration Selection of the file with the commands to be executed The commands are executed with a user confirmation User has the option to save the output to a file","ref":"NASAExplorationRoversControlTerminalInterface.html#start/0","title":"NASAExplorationRoversControlTerminalInterface.start/0","type":"function"},{"doc":"This module contains logic to show terminal interface celestial bodies menu to user and to handle user interactions.","ref":"NASAExplorationRoversControlTerminalInterface.CelestialBodiesMenu.html","title":"NASAExplorationRoversControlTerminalInterface.CelestialBodiesMenu","type":"module"},{"doc":"Retries to show menu and wait for user interaction. It is an alias to show_menu_and_wait_for_user_interaction but was splitted to be able to test the retry mechanism.","ref":"NASAExplorationRoversControlTerminalInterface.CelestialBodiesMenu.html#retry/1","title":"NASAExplorationRoversControlTerminalInterface.CelestialBodiesMenu.retry/1","type":"function"},{"doc":"Shows celestial bodies menu to user and handle interactions. Receives a state (map) and returns a state with the user's choice appended.","ref":"NASAExplorationRoversControlTerminalInterface.CelestialBodiesMenu.html#show_menu_and_wait_for_user_interaction/1","title":"NASAExplorationRoversControlTerminalInterface.CelestialBodiesMenu.show_menu_and_wait_for_user_interaction/1","type":"function"},{"doc":"This module contains logic to execute commands from selected file by user.","ref":"NASAExplorationRoversControlTerminalInterface.CommandsExecutor.html","title":"NASAExplorationRoversControlTerminalInterface.CommandsExecutor","type":"module"},{"doc":"Executes the exploration commands contained in the file chosen by user. It shows a summary before the execution and waits for a confirmation. Receives a state (map) and returns a state with the user's choice appended. In case of the file does not exist or user does not confirm, it will halt without any returns.","ref":"NASAExplorationRoversControlTerminalInterface.CommandsExecutor.html#explore_celestial_body_using_commands_from_selected_file/1","title":"NASAExplorationRoversControlTerminalInterface.CommandsExecutor.explore_celestial_body_using_commands_from_selected_file/1","type":"function"},{"doc":"","ref":"NASAExplorationRoversControlTerminalInterface.CommandsExecutor.html#show_commands_execution_summary/1","title":"NASAExplorationRoversControlTerminalInterface.CommandsExecutor.show_commands_execution_summary/1","type":"function"},{"doc":"This module contains logic to show terminal interface command input files menu to user and to handle user interactions.","ref":"NASAExplorationRoversControlTerminalInterface.CommandsInputFilesMenu.html","title":"NASAExplorationRoversControlTerminalInterface.CommandsInputFilesMenu","type":"module"},{"doc":"Retries to show menu and wait for user interaction. It is an alias to show_menu_and_wait_for_user_interaction but was splitted to be able to test the retry mechanism.","ref":"NASAExplorationRoversControlTerminalInterface.CommandsInputFilesMenu.html#retry/1","title":"NASAExplorationRoversControlTerminalInterface.CommandsInputFilesMenu.retry/1","type":"function"},{"doc":"Shows commands input files menu to user and handle interactions. Receives a state (map) and returns a state with the user's choice appended.","ref":"NASAExplorationRoversControlTerminalInterface.CommandsInputFilesMenu.html#show_menu_and_wait_for_user_interaction/1","title":"NASAExplorationRoversControlTerminalInterface.CommandsInputFilesMenu.show_menu_and_wait_for_user_interaction/1","type":"function"},{"doc":"This module contains for the final step at the interaction with the terminal interface.","ref":"NASAExplorationRoversControlTerminalInterface.FinalStep.html","title":"NASAExplorationRoversControlTerminalInterface.FinalStep","type":"module"},{"doc":"Prompts the user if he wants to save the output to a file. Receives a state (map) but returns anything and halts the system. In case the user confirms, a file will be saved to the system at the path priv/commands_output_files containing the execution output.","ref":"NASAExplorationRoversControlTerminalInterface.FinalStep.html#show_final_user_options_and_wait_for_interaction/1","title":"NASAExplorationRoversControlTerminalInterface.FinalStep.show_final_user_options_and_wait_for_interaction/1","type":"function"},{"doc":"This module contains helpers for interacting with the user's terminal.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html","title":"NASAExplorationRoversControlTerminalInterface.IO","type":"module"},{"doc":"Breaks line at the user's terminal.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#break_line/0","title":"NASAExplorationRoversControlTerminalInterface.IO.break_line/0","type":"function"},{"doc":"Clears the user's terminal screen.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#clear_screen/0","title":"NASAExplorationRoversControlTerminalInterface.IO.clear_screen/0","type":"function"},{"doc":"Prints message to the user's terminal.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#print_message/1","title":"NASAExplorationRoversControlTerminalInterface.IO.print_message/1","type":"function"},{"doc":"Prints message to the user's terminal without breaking line.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#print_message/2","title":"NASAExplorationRoversControlTerminalInterface.IO.print_message/2","type":"function"},{"doc":"Prompts the user for a choice.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#prompt_user_choice/1","title":"NASAExplorationRoversControlTerminalInterface.IO.prompt_user_choice/1","type":"function"},{"doc":"Write a message to terminal with a typing effect.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#typing_effect_print/1","title":"NASAExplorationRoversControlTerminalInterface.IO.typing_effect_print/1","type":"function"},{"doc":"Waits a time to be able to user to read a message printed before.","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#wait_for_user_reading/0","title":"NASAExplorationRoversControlTerminalInterface.IO.wait_for_user_reading/0","type":"function"},{"doc":"","ref":"NASAExplorationRoversControlTerminalInterface.IO.html#wait_for_user_reading/1","title":"NASAExplorationRoversControlTerminalInterface.IO.wait_for_user_reading/1","type":"function"},{"doc":"NASA Exploration Rovers Control System designed to control exploration rovers.","ref":"readme.html","title":"NASA Exploration Rovers Control","type":"extras"},{"doc":"A set of exploration rovers has been sent by NASA to Mars and will land on a ground. This ground, must be explored by the rovers so that its built-in cameras can have a complete view of the area and send the images back to Earth.","ref":"readme.html#motivation","title":"NASA Exploration Rovers Control - Motivation","type":"extras"},{"doc":"The position and direction of the exploration rover are represented by a combination of x-y coordinates and a letter representing the cardinal direction in which the rover points, following the Wind Rose Compass . The highground is divided into a grid to simplify navigation. An example of a position would be (0, 0, N), which indicates that the rover is in the lower left corner and pointing north. To control the rovers, NASA sends a simple sequence of letters. The letters are &quot;L&quot; (rotate the rover 90 degrees to Left), &quot;R&quot; (rotate the rover 90 degrees to Right) and &quot;M&quot; (Move the rover keeping it's direction). In the grid, the point north of (x, y) is always (x, y + 1) and the point east of (x, y) is always (x + 1, y). I think you got the logic. If you didn't understand for the first time do not feel dumd, I had to read it a few times and to draw it to understand. :joy:","ref":"readme.html#how-exploration-rovers-work","title":"NASA Exploration Rovers Control - How exploration rovers work","type":"extras"},{"doc":"NASA engineers creates a file with all the exploration rovers instructions. This file is read by the system and is sent to exploration rovers. This files also has to include at the first line the ground size. This is important to the system be able to predict if any rover will be off the ground after the commands are executed. If that's the case, the commands will not be sent to the specific rover and a friendly error will be outputed instead of the new rover coordinates. It seems a little complex, but don't worry if you make some mistakes when writing this file, the system can handle most of them. But you will have a chance to review the instructions before confirming the submission. This confirmation is important because the commands after being sent take about 8 minutes to reach the rovers if you are exploring Mars. The commands input file The first line is the ground size, the following lines are the exploration rover initial position and followed by another line with the commands that will be performed. Example: 3 8 0 0 N MMM 3 8 N LMMM Explaining the example: 3 8 ( ground size ) 0 0 N ( Rover 1 initial position and direction ) MMM ( Rover 1 commands to be performed ) 3 8 N ( Rover 2 initial position and direction ) LMMM ( Rover 2 commands to be performed ) ... ( And so on , you can add many rovers as you want , the system can take care of it ) The output The output has in each line the new rover predicted position and direction (remember that it takes some time to the rovers to receive the commads, and the output will not wait for it). Example: 0 3 N 0 8 W Explaining the example: 0 3 N ( Rover 1 new predicted position and direction ) 0 8 W ( Rover 2 new predicted position and direction ) ... ( And so on ) The interface to interact To interact with the system, for now we have a terminal interface but other ways can be added latter (see the architecture decisions section). You can run using your favorite linux terminal. Maybe it works on Windows and Mac too, but has not been tested.","ref":"readme.html#how-the-system-work","title":"NASA Exploration Rovers Control - How the system work","type":"extras"},{"doc":"Most of the architecture decisions was followed by conventions from Clean Architecture. Clean architecture helps to isolate the business logic from the rest and let us developer to focus on what really matters, the business. There is a clear separation between these two points of view in the project folder: lib/nasa_exploration_rovers_control is for the business logic lib/nasa_exploration_rovers_control_terminal_interface is for the terminal interface, our delivery mechanism. Is the way our users will interact with the business logic At the business logic part, the file lib/nasa_exploration_rovers_control.ex is responsible to expose all the system use cases according to the business view for the product. This layer is known as our bounded context. It defined the boundaries, this should be the only file called by the delivery mechanisms. At lib/nasa_exploration_rovers_control/interactors we can find all the use cases and it's rules. lib/exploration_rover is our entity, that represents a real Exploration Rover from the real world. Another structure that was made, following another patterns, was the folder lib/nasa_exploration_rovers_control/celestial_bodies that contains all the specific celestial bodies business rules, like the rule that validates that the Mars ground is rectangular. There is also another folder that worth to mention that is lib/mix/tasks . This folder just followed the Elixir conventions to create an automated task to start some things. We are using for now just to start our terminal interface.","ref":"readme.html#architecture-decisions","title":"NASA Exploration Rovers Control - Architecture decisions","type":"extras"},{"doc":"Explore Celestial Body Using Commands From File Interpret Exploration Commands Input File Execute Exploration Rover Commands Rotate Exploration Rover Move Exploration Rover You can see all of them with their docs and some examples in the file lib/nasa_exploration_rovers_control.ex . Entities Exploration Rover Exploration Rover entity, it represents a real exploration rover that is exploring another planet or satellite. It has three attributes: position (required): A tuble with x and y axis. direction (required): A direction according to the Wind Rose Compass represented by a single character string. Valid values are N, S, W, E. commands: A list of commands to be performed by rover. Valid values for each command in the list are L (left), R (right) or M (move). It also has a bunch of validations to prevent invalid values to be placed in these attributes.","ref":"readme.html#use-cases","title":"NASA Exploration Rovers Control - Use cases","type":"extras"},{"doc":"A structure of celestial bodies was created to keep some specific logics. For now there's just Mars , but other celestial bodies can be easily added in the future. After all, after conquering Mars, we won't want to stop here, will we? Mars also has a specific characteristic of having its grounds to be explored as being rectangular highlands, so a specific Mars validation has been added to not allow square grounds. Some fake modules was created to be able to mock some Elixir and Erlang modules like System and :timer . The decision of which module will be used is made by the environment (see config folder files). The default is to use the language modules, but this default is overwriten by the test environment.","ref":"readme.html#some-other-crazy-decisions","title":"NASA Exploration Rovers Control - Some other crazy decisions","type":"extras"},{"doc":"This project requires Elixir version 1.11 and nothing more. If you have an older version of Elixir you can change it at mix.exs and probably it will still work fine. The system was tested on Linux, but probably will work on MacOS and Windows too.","ref":"readme.html#requirements","title":"NASA Exploration Rovers Control - Requirements","type":"extras"},{"doc":"Install the project dependencies. The project has only 2 dependencies: mock that is being used for mocking at tests and ex_doc that was used to generate the documentation. $ mix deps . get Start the Terminal Interface and follow the instructions. $ mix start_terminal_interface More information can be obtained by running: $ mix help start_terminal_interface","ref":"readme.html#getting-started","title":"NASA Exploration Rovers Control - Getting Started","type":"extras"},{"doc":"$ mix test","ref":"readme.html#testing","title":"NASA Exploration Rovers Control - Testing","type":"extras"},{"doc":"$ mix docs","ref":"readme.html#updating-documentation","title":"NASA Exploration Rovers Control - Updating documentation","type":"extras"},{"doc":"There are a few configuration options at config/config.exs that can be changed: typing_effect_print_time: There is a typing effect used by Terminal Interface. I found cool but if you get bored just change it to 0. user_reading_time: This is a time preconfigured to wait between some steps at the Terminal Interface to make the interface more user friendly. You don't need to change the other settings, changing it will affect the functioning of the Terminal Interface.","ref":"readme.html#config","title":"NASA Exploration Rovers Control - Config","type":"extras"},{"doc":"We encourage you to contribute to NASA Exploration Rovers Control! Just submit a PR that we will be happy to review. Wanna contribute and don't know where to start? There are some cool features in my mind: Prevent exploration rovers colisions The terminal interface could have the option to also receive the input commands by STDIO instead of only reading from files The terminal interface could print the commands that will be performed in a more readable and humanized format, this could help to prevent some mistakes If you liked those ideas feel free to open a feature request issue or a PR. :stuck_out_tongue:","ref":"readme.html#contributing","title":"NASA Exploration Rovers Control - Contributing","type":"extras"},{"doc":"If you came this far and does not know why this crazy project was made, I'm happy that I've got your attention. :satisfied: This was just an exercise made, and (at least for now :stuck_out_tongue_closed_eyes:) it has no real uses. Thank you for the challenge, was real nice to work on it. :heart_eyes:","ref":"readme.html#wtf","title":"NASA Exploration Rovers Control - Wtf?!","type":"extras"}]